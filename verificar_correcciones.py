"""
Script de verificaci√≥n y correcci√≥n de bugs
Verifica que los sistemas corregidos funcionen correctamente
"""

import os
import sys
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_ticket_system():
    """Verificar que el sistema de tickets tenga el c√≥digo correcto"""
    print("üé´ Verificando Sistema de Tickets...")
    
    ticket_file = "modules/ticket_system.py"
    if not os.path.exists(ticket_file):
        print("‚ùå Archivo de tickets no encontrado")
        return False
    
    with open(ticket_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar correcciones de transcripciones
    checks = [
        'for ch in channel.guild.text_channels:',
        'registro-tickets',
        'transcripciones',
        'ticket-logs',
        'logger.info(f"Transcripci√≥n enviada a',
        'logger.warning("No se encontr√≥ canal para enviar transcripci√≥n")'
    ]
    
    all_checks_passed = True
    for check in checks:
        if check not in content:
            print(f"‚ùå Falta verificaci√≥n: {check}")
            all_checks_passed = False
        else:
            print(f"‚úÖ Encontrado: {check}")
    
    if all_checks_passed:
        print("‚úÖ Sistema de tickets corregido correctamente")
        return True
    else:
        print("‚ùå Sistema de tickets necesita m√°s correcciones")
        return False

def check_nsfw_system():
    """Verificar que el sistema NSFW tenga las correcciones"""
    print("\nüîû Verificando Sistema NSFW...")
    
    nsfw_file = "modules/nsfw.py"
    if not os.path.exists(nsfw_file):
        print("‚ùå Archivo NSFW no encontrado")
        return False
    
    with open(nsfw_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar correcciones de APIs
    checks = [
        'import asyncio',
        'ClientTimeout(total=10)',
        'nekos_mapping = {',
        'fallback_images = {',
        'try:',
        'except Exception as e:',
        'logger.error(f"Error en comando',
        'await interaction.followup.send("‚ùå Ocurri√≥ un error interno'
    ]
    
    all_checks_passed = True
    for check in checks:
        if check not in content:
            print(f"‚ùå Falta verificaci√≥n: {check}")
            all_checks_passed = False
        else:
            print(f"‚úÖ Encontrado: {check}")
    
    if all_checks_passed:
        print("‚úÖ Sistema NSFW corregido correctamente")
        return True
    else:
        print("‚ùå Sistema NSFW necesita m√°s correcciones")
        return False

def check_bot_configuration():
    """Verificar que el bot.py tenga la configuraci√≥n correcta"""
    print("\nü§ñ Verificando Configuraci√≥n del Bot...")
    
    bot_file = "bot.py"
    if not os.path.exists(bot_file):
        print("‚ùå Archivo bot.py no encontrado")
        return False
    
    with open(bot_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar que NSFW est√© cargado
    if '"NSFWCommands", "modules.nsfw"' in content:
        print("‚úÖ M√≥dulo NSFW est√° configurado para cargar")
        return True
    else:
        print("‚ùå M√≥dulo NSFW no est√° configurado correctamente")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîß VERIFICACI√ìN DE CORRECCIONES DE BUGS")
    print("=" * 50)
    
    all_systems_ok = True
    
    # Verificar sistemas corregidos
    if not check_ticket_system():
        all_systems_ok = False
    
    if not check_nsfw_system():
        all_systems_ok = False
    
    if not check_bot_configuration():
        all_systems_ok = False
    
    print("\n" + "=" * 50)
    if all_systems_ok:
        print("‚úÖ TODAS LAS CORRECCIONES APLICADAS CORRECTAMENTE")
        print("\nüìã Resumen de correcciones:")
        print("   üé´ Transcripciones de tickets: B√∫squeda mejorada de canales")
        print("   üîû Comandos NSFW: APIs corregidas con fallbacks")
        print("   üõ°Ô∏è Manejo de errores: Mejorado en ambos sistemas")
        print("\nüéØ SISTEMAS LISTOS PARA USAR")
    else:
        print("‚ùå ALGUNAS CORRECCIONES FALTAN")
        print("   Revisa los errores mostrados arriba")
    
    return all_systems_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

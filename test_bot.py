"""
Script de pruebas para verificar la funcionalidad del bot
Prueba la importaci√≥n de m√≥dulos y configuraci√≥n b√°sica
"""

import sys
import os
import asyncio
from dotenv import load_dotenv

def test_imports():
    """Prueba la importaci√≥n de todos los m√≥dulos"""
    print("üîç Probando importaciones...")
    
    try:
        import nextcord
        print("‚úÖ nextcord importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando nextcord: {e}")
        return False
    
    try:
        import yt_dlp
        print("‚úÖ yt-dlp importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando yt-dlp: {e}")
        return False
    
    try:
        from modules.moderation import Moderation
        from modules.entertainment import Entertainment
        from modules.music import Music
        from modules.scheduled_tasks import ScheduledTasks
        from modules.help_commands import HelpCommands
        print("‚úÖ Todos los m√≥dulos importados correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos: {e}")
        return False
    
    return True

def test_environment():
    """Prueba la configuraci√≥n de variables de entorno"""
    print("\nüîß Probando configuraci√≥n de entorno...")
    
    load_dotenv()
    
    token = os.getenv('DISCORD_TOKEN')
    if token and token != 'your_bot_token_here':
        print("‚úÖ Token de Discord configurado")
    else:
        print("‚ö†Ô∏è Token de Discord no configurado (usa 'your_bot_token_here' como placeholder)")
    
    daily_channel = os.getenv('DAILY_CHANNEL_ID')
    if daily_channel and daily_channel != 'your_channel_id_here':
        print("‚úÖ Canal diario configurado")
    else:
        print("‚ÑπÔ∏è Canal diario no configurado (opcional)")
    
    return True

def test_bot_initialization():
    """Prueba la inicializaci√≥n b√°sica del bot"""
    print("\nü§ñ Probando inicializaci√≥n del bot...")
    
    try:
        import nextcord
        from nextcord.ext import commands
        
        # Configurar intents
        intents = nextcord.Intents.default()
        intents.message_content = True
        intents.guilds = True
        intents.voice_states = True
        intents.members = True
        
        # Crear bot
        bot = commands.Bot(
            command_prefix='!',
            intents=intents,
            help_command=None,
            case_insensitive=True
        )
        
        print("‚úÖ Bot inicializado correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error inicializando bot: {e}")
        return False

async def test_cogs():
    """Prueba la carga de cogs"""
    print("\nüì¶ Probando carga de m√≥dulos...")
    
    try:
        # Simplemente verificar que las clases se pueden importar
        from modules.moderation import Moderation
        from modules.entertainment import Entertainment
        from modules.music import Music
        from modules.scheduled_tasks import ScheduledTasks
        from modules.help_commands import HelpCommands
        
        print("‚úÖ M√≥dulo Moderaci√≥n importado correctamente")
        print("‚úÖ M√≥dulo Entretenimiento importado correctamente")
        print("‚úÖ M√≥dulo M√∫sica importado correctamente")
        print("‚úÖ M√≥dulo Tareas Programadas importado correctamente")
        print("‚úÖ M√≥dulo Comandos de Ayuda importado correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de cogs: {e}")
        return False

def test_file_structure():
    """Verifica la estructura de archivos"""
    print("\nüìÅ Verificando estructura de archivos...")
    
    required_files = [
        'bot.py',
        'requirements.txt',
        '.env',
        'Procfile',
        'runtime.txt',
        'README.md',
        'modules/__init__.py',
        'modules/moderation.py',
        'modules/entertainment.py',
        'modules/music.py',
        'modules/scheduled_tasks.py',
        'modules/help_commands.py'
    ]
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} (faltante)")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è Archivos faltantes: {', '.join(missing_files)}")
        return False
    
    print("\n‚úÖ Todos los archivos necesarios est√°n presentes")
    return True

def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ INICIANDO PRUEBAS DEL BOT DISCORD")
    print("=" * 50)
    
    tests = [
        ("Estructura de archivos", test_file_structure),
        ("Importaciones", test_imports),
        ("Variables de entorno", test_environment),
        ("Inicializaci√≥n del bot", test_bot_initialization),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã Ejecutando: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error en {test_name}: {e}")
            results.append((test_name, False))
    
    # Prueba as√≠ncrona separada
    print(f"\nüìã Ejecutando: Carga de m√≥dulos")
    try:
        result = asyncio.run(test_cogs())
        results.append(("Carga de m√≥dulos", result))
    except Exception as e:
        print(f"‚ùå Error en carga de m√≥dulos: {e}")
        results.append(("Carga de m√≥dulos", False))
    
    # Resumen de resultados
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, passed_test in results:
        status = "‚úÖ PAS√ì" if passed_test else "‚ùå FALL√ì"
        print(f"{test_name}: {status}")
        if passed_test:
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìà RESULTADO FINAL: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! El bot est√° listo para ejecutarse.")
        return True
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron. Revisa los errores antes de ejecutar el bot.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
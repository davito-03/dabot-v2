import nextcord
from nextcord.ext import commands
from modules.config_manager import config, get_config, is_module_enabled
import json

class ConfigCommands(commands.Cog):
    """Comandos para gestionar la configuraci√≥n del bot"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @nextcord.slash_command(
        name="viewconfig",
        description="Ver la configuraci√≥n actual del bot"
    )
    async def config_main(self, interaction: nextcord.Interaction):
        """Comando principal de configuraci√≥n"""
        pass
    
    @config_main.subcommand(
        name="view",
        description="Ver configuraci√≥n actual de un m√≥dulo"
    )
    async def config_view(
        self,
        interaction: nextcord.Interaction,
        module: str = nextcord.SlashOption(
            description="M√≥dulo a consultar",
            choices=[
                "general", "permissions", "moderation", "levels", 
                "economy", "music", "welcome", "tickets", "logging",
                "filters", "voicemaster", "web"
            ]
        )
    ):
        """Ver configuraci√≥n de un m√≥dulo espec√≠fico"""
        
        try:
            # Verificar permisos b√°sicos
            if not interaction.user.guild_permissions.administrator:
                await interaction.response.send_message(
                    "‚ùå Necesitas permisos de administrador para usar este comando.",
                    ephemeral=True
                )
                return
                
            module_config = config.get(module, {})
            
            if not module_config:
                await interaction.response.send_message(
                    f"‚ùå No se encontr√≥ configuraci√≥n para el m√≥dulo `{module}`",
                    ephemeral=True
                )
                return
            
            # Crear embed con la configuraci√≥n
            embed = nextcord.Embed(
                title=f"‚öôÔ∏è Configuraci√≥n: {module.title()}",
                color=0x3498db
            )
            
            # Mostrar configuraci√≥n limitada para no exceder l√≠mites
            config_text = "```yaml\n"
            for key, value in list(module_config.items())[:10]:  # Limitar a 10 elementos
                if isinstance(value, dict):
                    config_text += f"{key}:\n  [diccionario con {len(value)} elementos]\n"
                elif isinstance(value, list):
                    config_text += f"{key}: [{len(value)} elementos]\n"
                else:
                    config_text += f"{key}: {value}\n"
            
            if len(module_config) > 10:
                config_text += f"... y {len(module_config) - 10} elementos m√°s\n"
            
            config_text += "```"
            
            embed.description = config_text
            embed.add_field(
                name="üí° Ayuda",
                value="Edita `config.yaml` manualmente para cambios avanzados",
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå Error al obtener configuraci√≥n: {e}",
                ephemeral=True
            )
    
    @config_main.subcommand(
        name="modules",
        description="Ver estado de todos los m√≥dulos"
    )
    async def config_modules(self, interaction: nextcord.Interaction):
        """Ver estado de todos los m√≥dulos disponibles"""
        
        try:
            # Verificar permisos b√°sicos
            if not interaction.user.guild_permissions.administrator:
                await interaction.response.send_message(
                    "‚ùå Necesitas permisos de administrador para usar este comando.",
                    ephemeral=True
                )
                return
                
            modules = [
                "moderation", "levels", "economy", "music", "welcome",
                "tickets", "logging", "filters", "voicemaster", "web",
                "fun", "automod"
            ]
            
            embed = nextcord.Embed(
                title="üìã Estado de M√≥dulos",
                color=0x3498db
            )
            
            enabled_modules = []
            disabled_modules = []
            
            for module in modules:
                if is_module_enabled(module):
                    enabled_modules.append(f"‚úÖ {module}")
                else:
                    disabled_modules.append(f"‚ùå {module}")
            
            if enabled_modules:
                embed.add_field(
                    name="Habilitados",
                    value="\n".join(enabled_modules),
                    inline=True
                )
            
            if disabled_modules:
                embed.add_field(
                    name="Deshabilitados",
                    value="\n".join(disabled_modules),
                    inline=True
                )
            
            embed.add_field(
                name="üí° Gesti√≥n",
                value="Edita `config.yaml` para habilitar/deshabilitar m√≥dulos",
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå Error al obtener estado de m√≥dulos: {e}",
                ephemeral=True
            )
    
    @config_main.subcommand(
        name="reload",
        description="Recargar configuraci√≥n desde el archivo"
    )
    async def config_reload(self, interaction: nextcord.Interaction):
        """Recargar configuraci√≥n desde config.yaml"""
        
        try:
            # Verificar permisos b√°sicos
            if not interaction.user.guild_permissions.administrator:
                await interaction.response.send_message(
                    "‚ùå Necesitas permisos de administrador para usar este comando.",
                    ephemeral=True
                )
                return
                
            config.reload_config()
            
            embed = nextcord.Embed(
                title="üîÑ Configuraci√≥n Recargada",
                description="La configuraci√≥n se ha recargado desde `config.yaml`",
                color=0x27ae60
            )
            embed.add_field(
                name="üìù Idioma",
                value=get_config('general.language', 'es-ES'),
                inline=True
            )
            embed.add_field(
                name="üîß Prefijo",
                value=get_config('general.prefix', '!'),
                inline=True
            )
            embed.add_field(
                name="üí° Nota",
                value="Algunos cambios pueden requerir reiniciar el bot",
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå Error al recargar configuraci√≥n: {e}",
                ephemeral=True
            )
    
    @config_main.subcommand(
        name="info",
        description="Informaci√≥n sobre el archivo de configuraci√≥n"
    )
    async def config_info(self, interaction: nextcord.Interaction):
        """Informaci√≥n sobre el sistema de configuraci√≥n"""
        
        embed = nextcord.Embed(
            title="üìã Sistema de Configuraci√≥n DaBot v2",
            description="Gesti√≥n completa de configuraci√≥n estilo La Cabra 2.0",
            color=0x3498db
        )
        
        embed.add_field(
            name="üìÅ Archivo Principal",
            value="`config.yaml` - Configuraci√≥n principal del bot",
            inline=False
        )
        
        embed.add_field(
            name="ÔøΩ Scripts de Configuraci√≥n",
            value="`configurar.bat` - Configuraci√≥n r√°pida (Windows)\n`setup_config.sh` - Configuraci√≥n r√°pida (Linux)",
            inline=False
        )
        
        embed.add_field(
            name="‚öôÔ∏è M√≥dulos Configurables",
            value="‚Ä¢ Moderaci√≥n y AutoMod\n‚Ä¢ Sistema de Niveles\n‚Ä¢ Econom√≠a y Trabajo\n‚Ä¢ M√∫sica y Entretenimiento\n‚Ä¢ Bienvenidas y Despedidas\n‚Ä¢ Tickets y Soporte\n‚Ä¢ Dashboard Web\n‚Ä¢ Y mucho m√°s...",
            inline=False
        )
        
        embed.add_field(
            name="ÔøΩ Comandos √ötiles",
            value="`/config view <m√≥dulo>` - Ver configuraci√≥n\n`/config modules` - Estado de m√≥dulos\n`/config reload` - Recargar configuraci√≥n",
            inline=False
        )
        
        current_lang = get_config('general.language', 'es-ES')
        current_prefix = get_config('general.prefix', '!')
        
        embed.add_field(
            name="üìä Estado Actual",
            value=f"Idioma: `{current_lang}`\nPrefijo: `{current_prefix}`",
            inline=True
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

def setup(bot):
    """Funci√≥n para cargar el cog"""
    return ConfigCommands(bot)
